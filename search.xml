<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[lamp]]></title>
    <url>%2F2019%2F06%2F16%2Flamp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[lamp linux+apache+mysql+php 安装lamp6 1yum -y install httpd mysql-service mysql php php-mysql 7 1yum -y install httpd mariadb-service mariadb php php-mysql 启动apache启动httpd服务 1systemctl start httpd 查看是否启动 1systemctl status httpd 添加到开机启动 1systemctl enable httpd 如果启动很慢 12345vim /etc/httpd/conf/httpd.conf修改字段\#ServerName www.example.com:80改为ServerName localhost:80 关闭centos7中的防火墙 1[root@localhost ~]# systemctl stop firewalld 通过浏览器输入虚拟机IP进行访问 启动数据库12systemctl start mariadb #启动服务systemctl enable mariadb #开机自启动 如果启动失败 1234Failed to start mariadb.service: Unit not found.# 可能是没有完全安装数据库yum install mariadb* 查看该服务使用的端口 12[root@localhost ~]# netstat -anput | grep mysqltcp 0 0 0.0.0.0:3306 0.0.0.0:* LISTEN 7938/mysqld mysql命令会进入数据库exit 退出数据库 12345[root@localhost ~]# mysqlMariaDB [(none)]&gt; MariaDB [(none)]&gt; exitBye[root@localhost ~]# 配置密码 有两种方法设置初始密码1配置安全向导（推荐）2设置root密码（不推荐） 安全配置向导 123456789[root@localhost ~]# mysql_secure_installation Enter current password for root (enter for none): #1回车设置root密码 ---回车Set root password? [Y/n] #2是否设置root密码 ---回车New password: #3设置root密码 ---123456&gt;回车Re-enter new password: #4确认root密码 ---123456&gt;回车Remove anonymous users? [Y/n] #5是否移除匿名用户 ---回车Disallow root login remotely? [Y/n] #6是否禁止root账号远程登录----回车Remove test database and access to it? [Y/n] #7是否移除test测试库 ---回车Reload privilege tables now? [Y/n] #8是否刷新权限授权表 ---回车 设置root密码 1mysqladmin -u root password &quot;123456&quot; 登录 123mysql -uroot -p123456或者mysql -uroot 测试php是否安装成功 1234567[root@localhost ~]# cat /var/www/html/index.php &lt;?php phpinfo()?&gt;You have new mail in /var/spool/mail/root[root@localhost ~]# systemctl restart httpd[root@localhost ~]# 访问]]></content>
      <categories>
        <category>lamp</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux计划任务]]></title>
    <url>%2F2019%2F06%2F16%2Flinux%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[计划任务 做一些周期性的任务,在生产中主要定时备份数据 任务调度级别分为: 用户任务调度 系统任务调度 计划任务的方式分为两种 at —– 突发性,临时决定的,只执行一次的任务 arontab —– 定时性,例行,每隔一定的周期重复执行 at安装at 1[root@localhost ~]# yum install at 启动atd服务 123456[root@localhost ~]# systemctl start atd[root@localhost ~]# systemctl status atd● atd.service - Job spooling tools Loaded: loaded (/usr/lib/systemd/system/atd.service; enabled; vendor preset: enabled) Active: active (running) since Sat 2019-06-01 20:19:06 CST; 4s ago Main PID: 7404 (atd) 设置atd任务 1234[root@localhost ~]# at 12:35at&gt; mkdir /opt/hhhat&gt; &lt;EOT&gt;job 4 at Sat Jun 1 12:35:00 2019 处通过ctrl+d保存退出 设置atd任务的其他指定时间方式 1234at 20:00 2018-10-1 在某一天at now +10min 在10分钟之后执行at 17:00 tomorrow 明天下午5点执行at 6:00 pm +3 days 在三天以后的下午6点执行 查看是否生效 12345678[root@localhost ~]# dateSat Jun 1 12:34:47 CST 2019[root@localhost ~]# ls /opt/[root@localhost ~]# dateSat Jun 1 12:35:17 CST 2019[root@localhost ~]# ls /opt/hhh 查看所有任务(atq | at -l) 12345678[root@localhost ~]# at 20:00 2019-06-01at&gt; mkdir /opt/testat&gt; &lt;EOT&gt;job 7 at Sat Jun 1 20:00:00 2019[root@localhost ~]# atq7 Sat Jun 1 20:00:00 2019 a root[root@localhost ~]# at -l7 Sat Jun 1 20:00:00 2019 a root 查看具体任务的内容,需要使用上面查看的编号 123456[root@localhost ~]# at -c 7...$&#123;SHELL:-/bin/sh&#125; &lt;&lt; &apos;marcinDELIMITER11f8e4d7&apos;mkdir /opt/testmarcinDELIMITER11f8e4d7 或者可以查看这些任务存放位置(没有执行过的任务) 1/var/spool/at/ 删除计划任务 123[root@localhost ~]# atrm 7[root@localhost ~]# atq[root@localhost ~]# crontab启动服务 123456[root@localhost ~]# systemctl start crond[root@localhost ~]# systemctl status crond● crond.service - Command Scheduler Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled) Active: active (running) since Sat 2019-06-01 19:49:40 CST; 6h left Main PID: 3933 (crond) 常用参数 1234567crontab -e 编辑cron任务crontab -r 删除cron任务crontab -u mk 指定mk用户的cron服务crontab -l 列出当前用户的cron服务的详细内容crontab -u root -l 列出指定用户的cron计划任务crontab -u mk -r root删除mk用户的cron计划任务 -e编辑时的语法| |1|2|3|4|5|6||-|-|-|-|-|-|-||符号| * | * | * | * | * | * ||解释|分钟|小时|几号|月份|星期几|command||取值范围|0-59|0-23|1-31|1-12|0-6|command| 特殊符号含义|符号|含义|举例||-|-|-|| * |代表取值范围内的任意数字|任意 / 每一天|| / |指定时间的间隔频率| */10|| - |代表从某个数字到某个数字|8-17|| , |分开离散的几个数字|6,12-18,21| 测试: 每分钟写入hhhh到该文件 12[root@localhost ~]# crontab -e* * * * * echo &quot;hhhh&quot; &gt;&gt; /opt/echo.txt 过一段时间查看 123[root@localhost ~]# cat /opt/echo.txt hhhhhhhh 每天凌晨2点1分备份数据 12[root@localhost ~]# crontab -e1 2 * * * tar zcvf /opt/grub2.tar.gz /boot/grub2 指定用户查看计划任务 123[root@localhost ~]# crontab -u root -l1 2 * * * tar zcvf /opt/grub2.tar.gz /boot/grub2* * * * * echo &quot;hhhh&quot; &gt;&gt; /opt/echo.txt 如果别人通过某一个用户写入计划任务,但是我们不知道是哪一用户,该如何排查呢 1[root@localhost ~]# crontab -u bin -e 所有用户的计划任务,都会在/var/spool/cron/下产生相应的文件 12[root@localhost ~]# ls /var/spool/cron/bin root 系统级别的计划任务系统任务调度的配置文件/etc/crontab 123456789101112131415[root@localhost ~]# cat /etc/crontab SHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root# For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed 可以在文件后加入 1* * * * * root echo &quot;hhhh&quot; &gt;&gt; /opt/echo.txt /etc/cron.d/ 是系统自动定期需要做的任务,但是又不是按照小时,天,星期,月来执行的,那就放在这个目录下面cron.deny 控制]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>定时执行计划</tag>
        <tag>计划任务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[变量]]></title>
    <url>%2F2019%2F06%2F16%2F%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[变量简介 变量是shell传递数据的一种方法 我们可以吧变量当成一个容器,通过变量可以在内存中存储数据,也可以在脚本执行中修改和访问存储的数据 变量有数字,字母,和下划线组成,区分大小写, 不能以数字开头 等号用于变量分配,在使用过程中等号两边不能有空格 当对变量赋值的类型是字符串时,需要用引号括起来 要对变量进行调用时,在变量名前加美元符号$ 分类变量分类 作用分类 1用户自定义变量, 2环境变量,主要保存的是和系统操作环境相关的数据 3位置参数变量,这种变量主要用来向脚本当中床底参数或数据,变量名不能自定义,变量作用是固定的 4预定义变量,是bash中已经定义好的变量,变量名不能自定义,变量作用也是固定的 变量作用域分类 全局变量,是环境变量,值不随着shell脚本的执行结束而消失 局部变量是shell程序内部定义的,其使用范围仅限于定义它的程序,对其他程序不可见,包括:自定义变量,位置参数变量,预定义变量 用户自定义变量规则 变量名由字母,数字,下划线组成, 不允许使用数字开头,等号两边不允许有空格 区分大小写 在使用变量时,在变量名前加$ 举例例1,等号两边不能有空格 12345[root@meditation ~]# var1 = 123-bash: var1: command not found[root@meditation ~]# var1=123[root@meditation ~]# echo $var1123 例2,变量值的叠加,使用${} $name是${name}的简化版本,在某些情况下,还必须使用花括号引起的方法来消除歧义 12345[root@meditation ~]# var2=mysql[root@meditation ~]# echo $var2db.log.log[root@meditation ~]# echo $&#123;var2&#125;db.logmysqldb.log 例3,命令的替换,使用$()或者反引号) 123456[root@meditation ~]# echo $date[root@meditation ~]# echo $(date &quot;+%F&quot;)2019-06-28[root@meditation ~]# echo `date &quot;+%F&quot;`2019-06-28 例4,命令的嵌套使用$( $()) 12[root@meditation ~]# var3=$(tar zcvf sh.tar.gz $(find /root/*.sh))tar: 从成员名中删除开头的“/” shell中单引号和双引号的区别 单引号之间的内容原封不动赋值给变量,双引号之间的内容如有特殊符号会保留它的特殊含义 ‘’ 所见即所得,原样输出. “” 如果内容中有命令，变量等，会先把变量，命令解析出结果，然后在输出最终内容来。 1234[root@meditation ~]# echo &apos;this is $var2&apos;this is $var2[root@meditation ~]# echo &quot;this is $var2&quot;this is mysql \ 转义符,跟在\后面的特殊符号将失去特殊含义,变为普通字符 1234[root@meditation ~]# echo $var2mysql[root@meditation ~]# echo \$var2$var2 删除变量1234[root@meditation ~]# unset var2[root@meditation ~]# echo $var2[root@meditation ~]# 环境变量在bash shell中,环境变量分为两类,全局变量和局部变量 全局变量:对于shell会话和所有的子shell都是可见的 局部变量:它只在自己的进程中 查看所有全局变量 1[root@meditation ~]# env export设置全局变量123456789[root@meditation ~]# var4=xuegod4[root@meditation ~]# export var5=xuegod5[root@meditation ~]# cat ./test.sh #!/bin/bashecho $var4echo $var5[root@meditation ~]# bash ./test.sh xuegod5 var4是局部变量,执行脚本时,重新打开了一个子shell,在这里面时获取不到的var5通过export设置为全局变量,在子shell中也是可见的 变量永久生效12[root@meditation ~]# env |grep var5var5=xuegod5 虽然我们设置了export全局变量,但是新开的xshell连接中,还是读不到变量var5让变量永久生效,可以把定义好的变量写入配置文件 当登录系统或新开一个ssh连接来启动bash进程时,会加载这4个配置文件 如果在多个文件中设置不同的值,以最后执行的文件为准 配置文件 描述 优先级 /etc/profile 系统全局环境和登录系统的一些配置 1 /etc/bashrc bash全局自定义配置文件,用于定义bash 2 /root/.bashrc 用于单独自定义某个用户的bash 3 /root/.bash_profile 用户单独自定义某个用户的系统环境 4 设置PATH环境变量 PATH变量是用来定义bash查找命令的目录当我们安装了第三方程序后,可以把第三方程序bin目录添加到这个PATH路径内,就可以在全局调用这个第三方程序 12345678910[root@meditation ~]# cat /opt/backup.sh #!/bin/bashecho &quot;Backup data is OK!&quot;[root@meditation ~]# chmod +x /opt/backup.sh [root@meditation ~]# backup.sh-bash: backup: command not found[root@meditation ~]# PATH=/opt/:$PATH[root@meditation ~]# backup.shBackup data is OK! 也可以将PATH=/opt/:$PATH加入到上述配置文件结尾处.source重新加载文件,即可生效 位置变量 $0 —- 代表命令本身 $1-9 —- 代表接受的第1-9个参数，10以上需要用{}括起来，比如${10}代表接收的第10个参数 $* —- 代表接收所有的参数，将所有参数看作一个整体 $@ —- 代表接收的所有参数，将每个参数区别对待 $# —- 代表接收的参数个数 12345678[root@meditation ~]# cat print.sh #!/bin/bashecho &quot;文件名:$0&quot;echo &quot;第一个参数:$1&quot;echo &quot;第二个参数:$2&quot;echo &quot;第三个参数:$3&quot;echo &quot;所有参数:$@&quot;echo &quot;总共参数数量:$#&quot; 1234567[root@meditation ~]# bash ./print.sh 1 2 3 4文件名:./print.sh第一个参数:1第二个参数:2第三个参数:3所有参数:1 2 3 4总共参数数量:4]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>变量</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过git+hexo+github搭建个人站点]]></title>
    <url>%2F2019%2F06%2F16%2Flinux%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8-vim%2F</url>
    <content type="text"><![CDATA[一初始vim查看安装路径和安装的软件包 123456[root@VM_0_15_centos ~]# which vim/usr/bin/vim[root@VM_0_15_centos ~]# rpm -qf `which vim`vim-enhanced-7.4.160-2.el7.x86_64[root@VM_0_15_centos ~]# rpm -qf `which vi`vim-minimal-7.4.160-2.el7.x86_64 二vim编辑器模式间切换1vim编辑器模式介绍123command mode(命令模式) --&gt; edit mode(编辑模式)command mode(命令模式) --&gt; visual edit mode(视图编辑模式)command mode(命令模式) --&gt; extended command mode(扩展命令模式/末行模式) 2vim编辑器模式之间切换 模式之间切换需要先通过esc键进入命令模式 进入edit mode(编辑模式) 1234567i,在当前字符之前插入a,在当前字符之后插入o,在下一行插入I,行首插入A,行尾插入O,上一行插入 进入visual edit mode(视图编辑模式) 123v ---- 进入可视模式ctrl+v ---- 进入可视块模式V ---- 进入可视行模式 进入exiended command mode(扩展命令模式) 1: 3vim各模式的命令1command mode(命令模式)1.1光标定位 123456hjkl ---- 左下上右0和home键 ---- 切换到行首$和end键 ---- 切换到行尾gg ---- 定位到文档的首行 G ---- 定位到文档的末行ngg / nG ---- 自定义到某行 1.2查找关键字 1234/string ---- 查找关键字n ---- 向下查找N ---- 向上查找:noh ---- 退出查找 1.3文本编辑 12345678910复制yy ---- 复制光标所在行5yy ---- 复制5行剪切/删除dd ---- 删除光标所在行6dd ---- 删除6行粘贴p ---- 粘贴 1.4恢复 12u 将你的操作逐步撤销ctrl+r 将你的逐步撤销再逐步恢复 1.5其他命令 123x 删除光标所在字符r 替换光标所在字符D 从光标删除到行尾 2visual edit mode(视图编辑模式) 通过一个实例会比较容易理解 多行注释实例 1234561 光标先放在要注释的第一行的行首2 ctrl+v进入可视块模式3 向下移动光标,将注释的行都选中4 按大写的I5 插入你需要的内容,比如#6 按esc就会全部添加注释了 删除多行注释 1选中内容之后,按d,就会删除了 上述方法适用于所有批量操作场景 3extended command mode(扩展命令模式/末行模式)3.1保存退出 12345w 保存q 内容不改变时,退出wq 保存退出,常用q! 更改了内容之后,想回到上次保存时的状态e! 恢复到上一次保存时的状态 3.2文本替换/etc/passwd文件中,替换1-3行中每行出现的第一个bin进行替换为xue 1:1,3 s/bin/xue 1-3行全部的bin替换为xue 1:1,3 s/bin/xue/g 替换所有指定行的内容 1:5 s/bin/xue/g 全文范围,将xue改为bin,搜索时候,不区分大小写 1:% s/xue/bin/gi 4edit mode(编辑模式)略 扩展技巧扩展1 调用外部文件或者命令1.1调用外部命令 场景:写脚本时候想要写入网卡mac地址, 1234561)命令模式下输入 :!ifconfig2)手动复制ether 52:54:00:89:a0:9d3)编辑模式下右键选择 粘贴 1.2调用外部文件 12341)命令模式下输入 :r /etc/passwd2)会自动将passwd文件写入到当前文件 扩展2 vim异常退出 touch.txt文件异常退出,再次进入该文件会出现修复界面,该如何修复呢 1直接在修复界面输入命令 123456只读方式打开 O直接编辑 E恢复 R删除交换文件 D退出 Q中止 A 2在命令行通过命令恢复 123q退出该界面用命令修复vim -r touch.txt 补充 .touch.txt.swp文件保存着你上次意外退出还没有保存的文件上面两种方法都需要将.touch.txt.swp删除,否则会一直提示让你修复文件 扩展3 设置环境临时设置 1234:set nu 设置行号:set ic 不区分大小写:set list 显示控制字符:set nonu 取消设置行号 永久设置环境 12vim /etc/vimrc 设置后影响系统所有用户vim ~/.vimrc 用户家目录设置后,影响某一用户 在文件下添加内容 set nu 保存会生效 扩展4 打开两个文件左右方式打开两个文件 1vim -O /etc/passwd /etc/hosts 在两个文件中切换 1ctrl+ww 扩展5 比较两个文件有两个命令来对比两个文件,但vimdiff命令会列出两个文件来对比,更加直观 12345[root@VM_0_15_centos ~]# cp /etc/passwd /etc/mima[root@VM_0_15_centos ~]# echo hhhhhhh &gt;&gt; /etc/mima [root@VM_0_15_centos ~]# diff /etc/passwd /etc/mima 28a29&gt; hhhhhhh 123[root@VM_0_15_centos ~]# vimdiff /etc/passwd /etc/mima 2 files to edit:qa 退出两个文件]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>命令行编辑器</tag>
        <tag>文本编辑器</tag>
        <tag>编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux文本编辑器-vim]]></title>
    <url>%2F2019%2F06%2F16%2Fvim%E7%BC%96%E8%BE%91%E5%99%A8%2F</url>
    <content type="text"><![CDATA[一初始vim查看安装路径和安装的软件包 123456[root@VM_0_15_centos ~]# which vim/usr/bin/vim[root@VM_0_15_centos ~]# rpm -qf `which vim`vim-enhanced-7.4.160-2.el7.x86_64[root@VM_0_15_centos ~]# rpm -qf `which vi`vim-minimal-7.4.160-2.el7.x86_64 二vim编辑器模式间切换1vim编辑器模式介绍123command mode(命令模式) --&gt; edit mode(编辑模式)command mode(命令模式) --&gt; visual edit mode(视图编辑模式)command mode(命令模式) --&gt; extended command mode(扩展命令模式/末行模式) 2vim编辑器模式之间切换 模式之间切换需要先通过esc键进入命令模式 进入edit mode(编辑模式) 1234567i,在当前字符之前插入a,在当前字符之后插入o,在下一行插入I,行首插入A,行尾插入O,上一行插入 进入visual edit mode(视图编辑模式) 123v ---- 进入可视模式ctrl+v ---- 进入可视块模式V ---- 进入可视行模式 进入exiended command mode(扩展命令模式) 1: 3vim各模式的命令1command mode(命令模式)1.1光标定位 123456hjkl ---- 左下上右0和home键 ---- 切换到行首$和end键 ---- 切换到行尾gg ---- 定位到文档的首行 G ---- 定位到文档的末行ngg / nG ---- 自定义到某行 1.2查找关键字 1234/string ---- 查找关键字n ---- 向下查找N ---- 向上查找:noh ---- 退出查找 1.3文本编辑 12345678910复制yy ---- 复制光标所在行5yy ---- 复制5行剪切/删除dd ---- 删除光标所在行6dd ---- 删除6行粘贴p ---- 粘贴 1.4恢复 12u 将你的操作逐步撤销ctrl+r 将你的逐步撤销再逐步恢复 1.5其他命令 123x 删除光标所在字符r 替换光标所在字符D 从光标删除到行尾 2visual edit mode(视图编辑模式) 通过一个实例会比较容易理解 多行注释实例 1234561 光标先放在要注释的第一行的行首2 ctrl+v进入可视块模式3 向下移动光标,将注释的行都选中4 按大写的I5 插入你需要的内容,比如#6 按esc就会全部添加注释了 删除多行注释 1选中内容之后,按d,就会删除了 上述方法适用于所有批量操作场景 3extended command mode(扩展命令模式/末行模式)3.1保存退出 12345w 保存q 内容不改变时,退出wq 保存退出,常用q! 更改了内容之后,想回到上次保存时的状态e! 恢复到上一次保存时的状态 3.2文本替换/etc/passwd文件中,替换1-3行中每行出现的第一个bin进行替换为xue 1:1,3 s/bin/xue 1-3行全部的bin替换为xue 1:1,3 s/bin/xue/g 替换所有指定行的内容 1:5 s/bin/xue/g 全文范围,将xue改为bin,搜索时候,不区分大小写 1:% s/xue/bin/gi 4edit mode(编辑模式)略 扩展技巧扩展1 调用外部文件或者命令1.1调用外部命令 场景:写脚本时候想要写入网卡mac地址, 1234561)命令模式下输入 :!ifconfig2)手动复制ether 52:54:00:89:a0:9d3)编辑模式下右键选择 粘贴 1.2调用外部文件 12341)命令模式下输入 :r /etc/passwd2)会自动将passwd文件写入到当前文件 扩展2 vim异常退出 touch.txt文件异常退出,再次进入该文件会出现修复界面,该如何修复呢 1直接在修复界面输入命令 123456只读方式打开 O直接编辑 E恢复 R删除交换文件 D退出 Q中止 A 2在命令行通过命令恢复 123q退出该界面用命令修复vim -r touch.txt 补充 .touch.txt.swp文件保存着你上次意外退出还没有保存的文件上面两种方法都需要将.touch.txt.swp删除,否则会一直提示让你修复文件 扩展3 设置环境临时设置 1234:set nu 设置行号:set ic 不区分大小写:set list 显示控制字符:set nonu 取消设置行号 永久设置环境 12vim /etc/vimrc 设置后影响系统所有用户vim ~/.vimrc 用户家目录设置后,影响某一用户 在文件下添加内容 set nu 保存会生效 扩展4 打开两个文件左右方式打开两个文件 1vim -O /etc/passwd /etc/hosts 在两个文件中切换 1ctrl+ww 扩展5 比较两个文件有两个命令来对比两个文件,但vimdiff命令会列出两个文件来对比,更加直观 12345[root@VM_0_15_centos ~]# cp /etc/passwd /etc/mima[root@VM_0_15_centos ~]# echo hhhhhhh &gt;&gt; /etc/mima [root@VM_0_15_centos ~]# diff /etc/passwd /etc/mima 28a29&gt; hhhhhhh 123[root@VM_0_15_centos ~]# vimdiff /etc/passwd /etc/mima 2 files to edit:qa 退出两个文件]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>命令行编辑器</tag>
        <tag>文本编辑器</tag>
        <tag>编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux用户管理]]></title>
    <url>%2F2019%2F06%2F16%2Flinux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[用户与组 用户一般来说是指使用计算机的人,用户可以使用名称来登录计算机.除了人之外,一些系统服务器也需要含有部分特权的用户账户运行.因此出于安全考虑,用户管理应运而生,加以明确限制各个用户账户的权利.root在计算机中拥有至高权限,所以一般只作管理用,非特权用户可以通过SU或者SUDO程序来临时获得特权 用户类型 解释 UID 超级用户 root UID=0 普通用户 1系统用户 centos6UID:1-499 ; centos7UID:1-999 2本地用户 centos6UID:500+ ; centos7UID:1000+ 虚拟用户 伪用户 一般不会用来的登录系统,主要用于维持某个服务的正常运行 UID:每个用户的身份标识,类似于人的身份证号码用户和组的关系 一对一 一对多 多对一 多对多 配置文件 配置文件 作用 /etc/passwd 用户配置文件.记录每个用户的基本信息,并且对所有用户可读,每一行记录对应一个用户,每行记录通过冒号分隔 /etc/group 用户组文件.用户组的所有信息存放地,组名不能重复 /etc/shadow 用户对应的密码信息,因为passwd文件对所有用户都是可读的,为安全起见,把密码从passwd中分离出来放入这个单独的文件,该文件只有可读权限,从而保证密码安全性 /etc/passwd 1234567891011121314[root@localhost ~]# cat /etc/passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologin...每个字段解释用户名;密码占位符;UID;GID;用户描述;用户主目录;登录后使用的shell /etc/group 123456789101112131415[root@localhost ~]# cat /etc/grouproot:x:0:bin:x:1:daemon:x:2:sys:x:3:adm:x:4:tty:x:5:disk:x:6:lp:x:7:mem:x:8:kmem:x:9:...字段解释组名:x:GID:(当前组中的用户) /etc/shadow 123456789101112131415161718192021222324[root@localhost ~]# cat /etc/shadowroot:$6$8DLTLutUGU6/s0BC$O/oTIS6Jo5pBHOfouJRC8ph.x/KDZh2HDibV6Py.VCD7rNxsVz8nEi7rK3UFrZrE1fVw5MFLTZeoqDS48D.QM0::0:99999:7:::bin:*:17834:0:99999:7:::daemon:*:17834:0:99999:7:::adm:*:17834:0:99999:7:::lp:*:17834:0:99999:7:::...参数解释:用户名;被加密后的密码;最近更改密码的日期,从19700101开始计算,69年UNIN出现的,1970/1/1/开始计算;密码不能更改的天数,0表示随时可以更改;密码过期时间,多少天后必须更改;密码需要更改的前七天发出警告;宽限天数,密码过了几天后还能更改密码;账号过期时间;保留;密码加密.分为三个部分第一部分表示使用哪种哈希算法 $1表示MD5,$6表示SHA-512 $5表示SHA-256第二部分用于加密哈希的salt第三部分是已加密的哈希 用户管理命令添加用户useradd -u &quot;UID&quot; -g &quot;初始组&quot; -G &quot;附加组&quot; -s &quot;登录的shell&quot; 用户 1添加harry用户 此命令会自动创建harry组,并成为该用户的主组,同时默认登录的shell是bash 12345[root@localhost ~]# useradd harry[root@localhost ~]# tail -1 /etc/passwdharry:x:1000:1000::/home/harry:/bin/bash[root@localhost ~]# id harryuid=1000(harry) gid=1000(harry) groups=1000(harry) 2创建harry1用户,指定UID为1100 123[root@localhost ~]# useradd -u 1100 harry1[root@localhost ~]# id harry1uid=1100(harry1) gid=1100(harry1) groups=1100(harry1) 3创建harry2用户,指定家目录 12345[root@localhost ~]# useradd -d /opt/harry2 harry2[root@localhost ~]# ls /opt/harry2[root@localhost ~]# id harry2uid=1101(harry2) gid=1101(harry2) groups=1101(harry2) 4创建harry3用户,不创建家目录 12345[root@localhost ~]# useradd -M harry3[root@localhost ~]# ls /home/harry harry1[root@localhost ~]# id harry3uid=1102(harry3) gid=1102(harry3) groups=1102(harry3) 5创建harry4用户,指定主组harry 123[ root@localhost ~]# useradd -g harry harry4[root@localhost ~]# id harry4uid=1103(harry4) gid=1000(harry) groups=1000(harry) 6创建harry5用户,指定附属组harry,harry1 1234[root@localhost ~]# useradd -G harry,harry1 harry5[root@localhost ~]# id harry5uid=1104(harry5) gid=1104(harry5) groups=1104(harry5),1000(harry),1100(harry1)[root@localhost ~]# 创建用户的另一命令adduser,两者没有任何区别.是useradd的软链接 1234[root@localhost ~]# which adduser/usr/sbin/adduser[root@localhost ~]# ll /usr/sbin/adduser lrwxrwxrwx. 1 root root 7 Jun 1 02:55 /usr/sbin/adduser -&gt; useradd 添加密码1 passwd harry1 交互式创建密码 123456[root@localhost ~]# passwd harry1Changing password for user harry1.New password: BAD PASSWORD: The password is shorter than 8 charactersRetype new password: passwd: all authentication tokens updated successfully. 2 echo 123456 | passwd –stdin harry1 免交互 123[root@localhost ~]# echo 123456 | passwd --stdin harry2Changing password for user harry2.passwd: all authentication tokens updated successfully. 删除用户userdel -r harry5 123[root@localhost ~]# userdel -r harry5[root@localhost ~]# userdel -r harry4[root@localhost ~]# userdel -r harry3 选项-r 删除的时候,会同时删除用户的家目录和/var/mail下的目录 扩展1,模板文件被删除之后显示不正常的问题 shell提示符不完整 12345678910111213[root@localhost ~]# rm -rf /home/harry1/.bash*[root@localhost ~]# su - harry1Last login: Sat Jun 1 04:53:22 CST 2019 on pts/1-bash-4.2$ -bash-4.2$ exitlogout[root@localhost ~]# cp /etc/skel/.bash* /home/harry1/[root@localhost ~]# chown harry1:harry1 /home/harry1/.bash*[root@localhost ~]# su - harry1Last login: Sat Jun 1 04:54:15 CST 2019 on pts/1[harry1@localhost ~]$ exitlogout[root@localhost ~]# 扩展2,忘记root密码,怎样找回呢1开机在选择内核的界面处,按”e” 2修改ro为 rw init=/sysroot/bin/sh 3按ctrl+x保存:进入紧急模式]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>用户管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux软件管理]]></title>
    <url>%2F2019%2F06%2F16%2Flinux%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[权限管理1文件的基本权限1.1基础权限 root拥有最高权限 1-rw-r--r-- 1 root root 1548 May 7 00:18 /etc/passwd - rw- r– r– root root time filename 文件类型 拥有者权限 所属组权限 其他人的权限 拥有者 属组 最后修改时间 对象 其中文件类型|文件类型|解释||-|-||p|管道文件||d|目录||l|链接文件||-|普通文件||s|socket套接口文件.比如我们启用mysql时,会产生一个mysql.sock文件||c|表示字符设备文件||b|表示块设备文件| 权限| 权限 | 对文件来说 | 对目录来说 || - | - | - ||r|读|读(看目录里面有什么)||w|写|在目录里面操作文件||x|执行|进入目录| 常用的几种文件权限组成|权限|说明||-|-|| -rwx — — | 文件所有者对文件具有读取,写入和执行的权限|| -rw- r– r– | 文件所有者具有读,写的权限,用户组里用户和其他用户具有读取的权限|| -rw- rw- r-x | 文件所有者和同组里用户对文件具有读写的权限,其他用户仅具有读取和执行的权限|| drwx –x –x | 目录所有者具有读写和进入目录的权限,其他用户仅能进入该目录,却无法读取任何数据|| drwx — — | 除了目录所有者具有完整权限外,其他用户对该目录完全没有任何权限| 更改文件的属主和属组 chown 用来改变文件或者目录的属主 chgrp 可以用来改变文件或目录的默认属组(不常用) 参数-R,递归修改目录下的所有文件,修改目录时用 更改属主chown user filename更改属主和属组chown user:group filename更改属组chown :group filename 例 123[root@meditation sunlizhao]# lltotal 0-rw-rw-r-- 1 sunlizhao sunlizhao 0 Jun 24 21:49 test.sh 更改属主 1234[root@meditation sunlizhao]# chown root test.sh [root@meditation sunlizhao]# lltotal 0-rw-rw-r-- 1 root sunlizhao 0 Jun 24 21:49 test.sh 更改属主和属组 123[root@meditation sunlizhao]# chown sunlizhao:root test.sh [root@meditation sunlizhao]# ll test.sh -rw-rw-r-- 1 sunlizhao root 0 Jun 24 21:49 test.sh 更改属组 123[root@meditation sunlizhao]# chown :sunlizhao test.sh [root@meditation sunlizhao]# ll test.sh -rw-rw-r-- 1 sunlizhao sunlizhao 0 Jun 24 21:49 test.sh 一个文件只有读的权限,拥有者可以修改这个文件吗?文件所有者一定可以写文件1切换到属主,查看权限 1234[root@meditation sunlizhao]# su sunlizhao[sunlizhao@meditation ~]$ lltotal 0-r--r--r-- 1 sunlizhao sunlizhao 0 Jun 24 21:49 test.sh 2发现没有权限,尝试使用vim进行写如内容:qqq.并强制保存退出:wq! 1234[sunlizhao@meditation ~]$ cat test.sh [sunlizhao@meditation ~]$ vim test.sh [sunlizhao@meditation ~]$ cat test.sh qqq 修改文件,目录的权限语法:chmod [对谁操作] [操作符] [赋予什么权限] 文件名 对谁操作 解释 u 用户user,表示文件或目录的所有者 g 用户组group,表示文件或目录的所属用户组 o 其他用户others a 所有用户 作符号 解释 + 添加权限 - 减少权限 = 直接给定一个权限 例 123[root@meditation sunlizhao]# lltotal 4-r--r--r-- 1 sunlizhao sunlizhao 4 Jun 24 22:15 test.sh 赋予文件的所有者和所属组只有读和写权限 1234[root@meditation sunlizhao]# chmod ug=rw test.sh [root@meditation sunlizhao]# lltotal 4-rw-rw-r-- 1 sunlizhao sunlizhao 4 Jun 24 22:15 test.sh 赋予文件其他用户执行权限 1234[root@meditation sunlizhao]# chmod o+x test.sh [root@meditation sunlizhao]# lltotal 4-rw-rw-r-x 1 sunlizhao sunlizhao 4 Jun 24 22:15 test.sh 八进制修改权限 权限 二进制 八进制 描述 — 000 0 没有任何权限 –x 001 1 只有执行权限 -w- 010 2 只有写入权限 -wx 011 3 有执行和写入权限 r– 100 4 只有读取权限 r-x 101 5 有读取和执行权限 rw- 110 6 有读取和写入权限 rwx 111 7 有全部权限 rwx的权限分别是4,2,1 .使用计算后的数值. 比如rwxr-x–x用751来表示 1.2补码 为什么我们创建的文件的权限默认是644呢?我们创建文件的默认权限是怎么来的呢 umask命令允许设定文件创建时的缺省模式 永久更改:修改配置文件中的umask值 /etc/profile ~/.bash_profile ~/.profile 1234567[root@meditation ~]# vim /etc/profile if [ $UID -gt 199 ] &amp;&amp; [ &quot;`/usr/bin/id -gn`&quot; = &quot;`/usr/bin/id -un`&quot; ]; then umask 002 else umask 022 fi UID大于199且用户的组名和用户名一样,那么umask值为002,否则为022普通用户一般umask值为022 计算方法 文件默认权限是666 目录默认权限是777 666-022=644 777-022=755 这是一个好的记忆方法,但是不严谨.设置为033就会出错 正确的计算方法是1, 将默认权限(目录777,文件666)和umask值都转换为2进制2, 对umask取反3, 将默认权限和umask取反后的值 做与运算4,将得到的二进制再转换为8进制,即为权限 例子:umask为033 1234567文件默认权限666的二进制为110 110 110 #1转换2进制umask值为033的二进制为000 011 011umask值得二进制取反为111 100 100 #2umask二进制后取反110 110 110 和 111 100 100做与运算得到110 101 101 #3 与运算110 101 101 #4转成8进制,得到权限6 4 4 临时配置123456[root@meditation ~]# umask 044[root@meditation ~]# touch text.sh[root@meditation ~]# mkdir text[root@meditation ~]# ll text.sh -d textdrwx-wx-wx 2 root root 4096 Jun 24 23:42 text-rw--w--w- 1 root root 0 Jun 24 23:41 text.sh 666-044=622777-044=533 2特殊权限文件的特殊权限|suid | sgid | sticky ||-|-|-||u+s|g+s|o+t| SUID只能设置在二进制可执行程序上面.对目录设置无效功能:程序运行时的权限从执行者变更为 程序所有者的权限例子 1234[root@meditation ~]# which passwd/usr/bin/passwd[root@meditation ~]# ll /usr/bin/passwd -rwsr-xr-x. 1 root root 27832 Jun 10 2014 /usr/bin/passwd SUID属性一般用在可执行文件上,当用户执行该文件时,会临时拥有该执行文件的所有者权限当我们使用passwd时,会获得所有者root的权限比如普通用户用passwd修改密码.其实根本没有权限去修改/etc/shadow文件.也是在使用passwd修改时,获得的权限 例:为less增加权限,可以在普通用户下执行获得所有者root的权限 123456789[sunlizhao@meditation ~]$ less /etc/shadow/etc/shadow: Permission denied[sunlizhao@meditation ~]$ su rootPassword: [root@meditation sunlizhao]# chmod u+s /usr/bin/less[root@meditation sunlizhao]# su - sunlizhaoLast login: Tue Jun 25 00:34:59 CST 2019 on pts/0[sunlizhao@meditation ~]$ less /etc/shadowsunlizhao:$1$ovE1KmR/$VjboKPTHp83/K5q8UqdgF.:18022:0:99999:7::: SGID即可以给二进制可执行程序设置,也可以给目录设置功能,在设置了SGID权限的目录下简历文件时,新创建的文件的所属组会继承上级目录的权限 例:为目录设置SGID权限后,更改GID.在目录下创建文件,发现GID继承上级目录 123456789[root@meditation sunlizhao]# mkdir test10[root@meditation sunlizhao]# chmod g+s test10/[root@meditation sunlizhao]# chown :bin test10/[root@meditation sunlizhao]# ll -d test10/drwxr-sr-x 2 root bin 4096 Jun 25 00:45 test10/[root@meditation sunlizhao]# touch ./test10/test.sh[root@meditation sunlizhao]# ll ./test10/test.sh -rw-r--r-- 1 root bin 0 Jun 25 00:48 ./test10/test.sh sticky只作用于目录功能: 目录下创建的文件只有root,文件创建者,目录所有者才能删除 文件扩展权限ACL例:设置用户sunlizhao对文件test.sht拥有rwx权限,sunlizhao用户不属于test.sh的所属主和组,又不想给other提权,该怎么做 12[root@meditation ~]# setfacl -m u:sunlizhao:rwx /tmp/test.sh [root@meditation ~]# 例2给目录加扩展权限(默认可以,不加d也可以) 123[root@meditation ~]# mkdir /tmp/test[root@meditation ~]# setfacl -m d:u:sunlizhao:rwx /tmp/test [root@meditation ~]# 例3给目录下所有文件增加扩展权限[root@meditation ~]# setfacl -R -m u:sunlizhao:rwx /tmp/test[root@meditation ~]# 去掉所有ACL权限 12345678910[root@meditation tmp]# lldrwxrwxr-x+ 2 root root 4096 Jun 25 01:21 test-rw-rwxr--+ 1 root root 5 Jun 25 01:18 test.sh[root@meditation tmp]# setfacl -b /tmp/test.sh [root@meditation tmp]# setfacl -b /tmp/test[root@meditation tmp]# lldrwxr-xr-x 2 root root 4096 Jun 25 01:21 test-rw-r--r-- 1 root root 5 Jun 25 01:18 test.sh 3创建一个root无法删除的文件 centos6开始有的 12345678chattr [选项] 文件选项+a 只能追加内容+i 系统不允许对这个文件进行任何的修改,如果是目录,那么只能修改目录下的文件,不允许建立和删除文件-a 取消a-i 取消ilsattr 查看]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>权限管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux基础]]></title>
    <url>%2F2019%2F06%2F16%2Flinux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[linux基本命令操作一,历史概述1, 1969年 UNIX操作系统诞生,由贝尔实验室的Thompson(肯汤普森)和Dennis Ritchie(丹尼斯里奇) 2, 1972年 C语言诞生(汇编)3, 1973年 UNIX用C语言改写完成. 为了推广,开源,最为著名的是伯克利分校的BSD UNIX系统4, 1990年,朗讯认识到了UNIX的价值,起诉了很多厂商:IBM,HP5, 1991年,linux系统正式发布 谈到linux一定会知道Linux Kernel的创始人,Linux Benedict Torvalds(林纳斯本纳第克特托瓦兹),还要记住一个人,Richard Stallman(理查德斯托尔曼)他是自由软件运动的精神领袖,GNU计划及自由软件基金会的创立者,是著名黑客#&lt; GNU是GNU’S NOT UNIX的缩写 二,linux目录结构目录结构 1234567891011121314151617/ 处于linux系统树形结构的最顶端,是linux文件系统的入口/bin----常用的二进制命令目录,如ls,cp,mkdir等/boot----存放系统启动相关文件/dev----设备文件目录/etc----畅通系统及二进制安装包配置文件, 默认路径和服务器启动命令目录/home----普通用户的家目录,默认存放目录/mnt /media---- 一般用来临时挂载存储设备的挂载目录/opt----没什么用,可用自己用/proc----存在于内存中,是内存的映射,可以查看CPU信息,/pro/cpuinfo/sys----系统目录,存放硬件信息的相关文件/run----运行目录,存放系统运行时的数据,如进程PID文件/srv----服务目录,存放本地服务的相关文件/sbin----超级用户可执行命令存放目录/tmp----存放临时文件目录,只能被owner(拥有者)和超级权限删除/var----系统运行和软件运行时产生的日志信息/usr----存放应用程序和文件,自己安装存放位置/lib /lib64----都在/usr目录,存放系统最基本的动态,链接共享库,能够让程序正常编译运行,lib***.a是静态库, lib***.so是动态库 路径:表示文件的位置方式,就是路径绝对路径,从/开始,如/etc,/etc/passwd相对路径,相对于当前路径,以./或是../开始的 三,linux基本命令操作1终端Linux终端仿真器Terminal连接终端工具xshelltty命令可以查看当前所属的虚拟终端 不同虚拟终端之间进行通讯 1echo xuegod &gt; /dev/pts/0 在第2个终端上输入,会在第一个终端上输出 对所有终端广播消息 1wall &quot;The system will be shut down in 10 minutes&quot; 2shellshell提供了用户和内核进行交互操作的一种接口,是一个命令解释器 通过type命令可以查看内部命令,在系统启动时,调入内存,执行效率高外部命令,是系统软件的功能,用户需要时从硬盘读入内存 命令提示符中的”#”是超级用户,$是普通用户查看当前系统支持的shell 1cat /etc/shells 查看当前系统使用的是哪个shell 1cat /etc/passwd 3命令基本格式格式: 12命令 [选项] [对象]` 命令:具体执行的命令 选项:分为-和–两种 对象:要处理的文件,目录,用户等资源 4命令提示符1[root@localhost ~]# root: 当前登录用户 localhost:主机名 ~: 当前所在目录 #:超级用户的提示符号 $:普通用户的提示符 5查询目录中的内容1ls [选项] [文件或者目录] 选项 -a: 显示所有文件,包括隐藏文件 -l: 显示详细信息 -d: 查看目录属性 -h: 人性化显示文件大小 -i: 显示idode号 -S 以文件的大小进行排序(大&gt;小) 6别名的使用6.1别名的使用 设置别名 1alias vimens33=&apos;vim /etc/sysconfig/network-scripts/ifcfg-ens33&apos; 使用别名 1vimens33 删除别名 1unalias vimens33 6.2别名永久生效 12341)当前用户永久生效,写入到当前用户家目录下将上面的内容写入到/root/.bashrc2)全局使用,所有用户都生效将上面内容写入到/etc/bashrc 都需要重新加载生效source 目录路径 7建立目录mkdir1mkdir -p [目录名] 选项 -p: 递归创建 8切换目录1cd [目录] 简化操作 cd ~ : 进入当前用户的家目录 cd ../.. : 进入上两级目录 cd - : 进入上次目录 cd . : 进入当前目录 扩展1相对路径 参照当前所在目录,进行查找cd ../usr/local/src/ 扩展2绝对路径 从根目录进行指定,一级一级进行递归查找.任何目录下,都能够进入到指定位置cd /etc/local/ 9创建空文件touch123touch 文件1 文件2 #批量创建文件touch files&#123;1..5&#125; #创建files1到files5 5个文件touch -d “20190101 21:30” file.txt #指定创建时间 10删除1234rm -rf [文件或者目录]选项-r: 删除目录-f: 强制删除 11复制命令1cp [选项] [源文件或目录] [目标目录] 选项 -r 复制目录 -p 连带文件属性目录 -d 若源文件是连接文件,则复制连接属性 -d 相当于-rpd 12剪切/重命名1mv [源文件或目录] [目标目录] 如果源文件和目标文件在同一目录下,就是重命名.否则就是移动 13硬链接vs软链接1ln [选项] [源文件] [目标文件] 选项 不加选项,创建硬链接 -s : 创建软链接 13.1硬链接特征(为一个文件又打开了一扇门) 1234拥有相同的i节点,和存储block,可以看做是同一个文件可以通过i节点识别不能跨分区不能针对目录使用 13.2软连接特征 12345类似window上的快捷方式软链接拥有自己的i节点,和存储block,但是数据块中只保存原文件的文件名和i节点号,并没有实际的文件数据软链接的文件权限为|rwxrwxrwx 用原文件的权限来限制软链接的权限修改任意文件,另一个都能改变删除原文件,软链接不能使用 14历史命令默认列出所有 1234history``` 查看最近的20条记录 history 20 12自定义保存数量 vi /etc/profile找到HISTSIZE字段,修改大小 12**历史命令常用方法 技巧1 光标上下键技巧2 ctrl+r &gt; 某命令的关键字 &gt; ctrl+r进行选择 &gt; 右光标键进行确认技巧3 键入时用空格来隐藏敏感数据历史 vi /etc/profile 中增加一个字段 HISTCONTROL=IGNORESPACE source /etc/profile 命令行键入时,在命令前面输入一个空格,这条命令记录不保存 12345###### 15时间管理&lt; 硬件时钟是指主板上的时钟设备,通常可在BIOS界面设定&lt; 系统时钟是指kernel中的时钟**15.1查看时间** 硬件时钟: hwclock系统时钟: date 12**15.2时区** UTC 世界标准时间GMT 格林尼治时间CST 中国标准时间 12**15.3显示自定义格式时间** date “+%Y-%m-%d %H:%M:%S” #年-月-日 时:分:秒date “+%F” #年-月-日 12**15.4设置指定时间** date -s “20200331 10:00:00” 12**15.5 -d显示字符串描述的时间,而不是当前时间** date -d “+1 months” +%F 123###### 16time测试时间命令time命令,测试一个命令运行的时间 time ls -l /etc/ 1234567time命令中的含义- real 实际使用时间- user 用户状态使用时间- sys 内核状态使用时间###### 17帮助命令&gt; 两种帮助查看命令man和--help man 命令命令 –help 1234567891011121314151617181920212223242526272829303132333435**17.1快捷键**|快捷键|解释|| --- | --- ||空格键|向下翻页||q|退出||PaGe down|向下翻页||PaGe up|向上翻页||home|到首页||end|到尾页||/|从上到下搜索某个关键字||? |从下往上搜索某个关键字||n | 查看下一个搜索到的关键字||N |查看上一个搜索到的关键字|**17.2文档中的结构**| 结构名称 | 翻译 || --- | --- | |NAME|名称||SYNOPSIS| 命令的大致使用说明||DESCRIPTION| 介绍说明||EXAMPLES| 演示||OVERVIEW| 概述||DEFAULTS| 默认的功能||OPTIONS| 具体的可用选项||ENVIRONMENT| 环境变量||FILES|用到的文件||SEE ALSO| 相关资料||HISTORY| 维护历史与联系方式|###### 18关机命令&gt; 关机命令比较多,这里只列举相对常用的shutdown&gt; shutdown 关机,重启,定时关机 shutdown [选项] [时间] 1234567891011选项- -h : 关机- -r : 重启- -c : 取消前一个命令时间- now : 立即- +10 : 10分钟之后- 10:00 : 十点钟常用的shutdown命令 shutdown -h now #立即关机shutdown -h +10 #10分钟之后关机shutdown -h 23:59 #指定时间关机shutdown -r 23:59 #指定时间重启 12###### 19系统运行级别 /etc/inittab0 系统停机模式,系统默认运行级别不能设置为0,会一直关机1 单用户默认,用于系统维护,禁止远程,类似windows下安全模式2 多用户模式,没有NFS和网络支持3 完整的多用户文本模式4 系统未使用5 图形化模式,登陆后进入图形GUI界面6 重启模式,不能设为默认,会一直重启 1更改默认启动级别 init 0关机init 6重启init 3进入字符界面init 5进入图形界面 1**查看当前启动级别** runlevelN 3 #输出结果为系统上一次运行级别,和当前级别 1234centos7已经不再使用/etc/inittab文件进行的默认启动级别配置而是使用了比sysinit的运行级别更为自由的target代替**设置默认第3启动级别** systemctl set-default multi-user.target 12**设置默认第5启动级别** systemctl set-default graphical.target 12**查看当前默认启动级别** systemctl get-default 12###### 20退出登录命令 logout 12345 - 通过ssh远程连接时,会经常用到###### 21临时切换到中文语言linux系统中通过LANG来切换语言临时改为中文 [root@localhost ~]# LANG=”zh_CN.UTF-8” 1临时改为英文 [root@localhost ~]# LANG=”en_US.UTF-8” 123456&gt; 当然也可以直接修改文件,那这样就是永久的了###### 22上传下载文件&gt; 通过远程工具上传下载文件安装lrzsz工具 [root@localhost ~]# yum install lrzsz 12该工具有两个命令**上传** rz 1**下载** sz /etc/passwd 1234###### 23查看上一个命令是否执行成功&gt; 0:上一个命令执行成功&gt; 1:上一个命令执行失败 [root@localhost nginx-1.16.0]# echo $?0 12###### 扩展:服务器操作**1设置服务器来电后自动开机** BIOS中,选择Integrated Peripharals中的SuperIO Device,将其中的Restore On Ac Power Loss 选项改为Power ON其中选项Last Start的意思的服务器来电之后,机器会恢复到断点之前的状态 12**2设置服务器定时开机** BIOS中,选择Power Management Setup ,就进入到了电源管理配置,选择wake Up Event Setup,找到RTC Alarm(报警)将Disabled改为Enabled,然后在下面设置Every day(每一天)的06:00:00 **f10 保存**]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
        <tag>linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux软件管理]]></title>
    <url>%2F2019%2F06%2F16%2Flinux%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[软件管理通常而言,可以通过后缀区别源码包和二进制包 以.rpm .deb结尾的软件包称之为二进制包,已经通过GCC编译后的 以.tar .tar.gz .zip .rar 结尾称为源码包,需要编译 目录 12345678二进制包 rom包管理 yum包管理 源码包 tar包管理 文件的管理和归档 1二进制包1.1rpm软件包管理 centos操作系统中有一款默认软件管理的工具,即红帽包管理工具(red hat package manager , RPM) rpm使用时,什么情况下使用软件包全名,什么时候使用软件包名? 包全名:对安装和更新升级时使用 包名:对已经安装过的软件包进行操作时,比如查找已经安装的某个包,卸载包等,使用包名(默认是去目录/var/lib/rpm下进行搜索.当一个rpm包安装到系统上之后,安装信息通畅会保存到本地) 安装选项 -i install的意思,安装软件包 -v 显示附加信息,提供更多详细信息 -h 安装时输出######标记 1,挂载光盘 1[root@localhost ~]# mount /dev/cdrom /mnt 2,安装 1[root@localhost ~]# rpm -ivh /mnt/Packages/zsh-5.0.2-31.el7.x86_64.rpm 3,查看是否安装成功 123456[root@localhost ~]# cat /etc/shells/bin/sh/bin/bash/usr/bin/sh/usr/bin/bash/bin/zsh 查询rpm -q 查询. 常与下面参数组合使用. -a 查询所有已经安装的软件包 -f 查询 文件所属哪个软件包,反向查询 -i 显示已经安装的rpm软件包信息,后面直接跟包名 -l 查询软件包中,文件安装的位置 -p 查询未安装软件包的相关信息,后面要跟软件的命名 -R 查询软件包的依赖性 -q 查询指定的包是否安装 12[root@localhost ~]# rpm -q zshzsh-5.0.2-31.el7.x86_64 -qa 查询所有已经安装包 12[root@localhost ~]# rpm -qa | grep vivim-minimal-7.4.160-5.el7.x86_64 -qf 查询文件或命令属于哪个安装包 1234[root@localhost ~]# which ifconfig/usr/sbin/ifconfig[root@localhost ~]# rpm -qf /usr/sbin/ifconfig net-tools-2.0-0.24.20131004git.el7.x86_64 -qpi 查询软件包的信息 12345678910# 对于未安装的包[root@localhost ~]# rpm -qpi /mnt/Packages/php-mysql-5.4.16-46.el7.x86_64.rpm Name : php-mysqlVersion : 5.4.16对于已经安装的包[root@localhost ~]# rpm -qi net-toolsName : net-toolsVersion : 2.0Release : 0.24.20131004git.el7 -qpl 查询软件包要安装的位置 123456789101112131415对于未安装的包[root@localhost ~]# rpm -qpl /mnt/Packages/net-tools-2.0-0.24.20131004git.el7.x86_64.rpm /bin/netstat/sbin/arp/sbin/ether-wake/sbin/ifconfig/sbin/ipmaddr/sbin/iptunnel对于已经安装的包[root@localhost ~]# rpm -ql net-tools/bin/netstat/sbin/arp/sbin/ether-wake/sbin/ifconfig 校验-qf 查看软件包内容是否被修改,用于检验命令没有被黑客修改 1234567[root@localhost ~]# which find/usr/bin/find[root@localhost ~]# rpm -qf /usr/bin/findfindutils-4.5.11-6.el7.x86_64[root@localhost ~]# rpm -V findutils #检查包,没有输出结果就是没有被修改[root@localhost ~]# rpm -Vf /usr/bin/find #检查具体文件,没有输出结果就是没有被修改 如何查看系统中所有的rpm包及安装的文件有没有被黑客修改? 1234[root@localhost ~]# rpm -Va.M....... g /boot/initramfs-3.10.0-957.el7.x86_64.imgS.5....T. c /etc/sysconfig/authconfig校验时候参考了/var/lib/rpm目录下的rpm数据库信息 卸载和升级卸载 123[root@localhost ~]# rpm -e zsh[root@localhost ~]# rpm -qa | grep zsh[root@localhost ~]# 强制卸载 不建议使用.有依赖关系是建议使用yum来卸载 1[root@localhost ~]# rpm -e --nodeps zsh 升级 因为升级时候会有一些依赖包要解决,所以一般我们使用(yum update 包),来升级 1rpm -Uvh 1.2 yum软件管理程序 yellow dog updater,Modified 基于RPm包管理,能够从指定的服务器自动下载RPM包并且安装,可以自动处理依赖性关系,并且一次安装所有以来的软件包.基于c/s架构 yum提供了查找,安装,删除某一个,一组甚至全部软件包的命令 1本地yum源1挂载光盘 1mount /dev/cdrom /mnt 2备份配置文件 12[root@localhost ~]# mv /etc/yum.repos.d/ /etc/yum.repo.d[root@localhost ~]# mkdir /etc/yum.repos.d 3创建yum本地源 123456[root@localhost ~]# vim /etc/yum.repos.d/centos7.repo #名称任意,但是一定要.repo结尾[centos7] #yum源名称,在本服务器上是惟一的name=centos7 #yum源描述信息baseurl=file:///mnt #yum源的路径(ftp://... HTTP://... file:///...)enabled=1 #1启用yum源 , 0为禁用gpgcheck=0 #1使用公钥校验rpm包的正确性,0为不校验 4清除yum缓存 123[root@localhost ~]# yum clean allLoaded plugins: fastestmirrorCleaning repos: centos7 2配置网络源1下载阿里yum源并保存到指定路径 wget 下载. -O指定保存位置 1[root@localhost ~]# wget -O /etc/yum.repos.d/CentOS.Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 2清除yum缓存 1[root@localhost ~]# yum clean all 3当centos推出新版本的系统后,yum源不能用了该怎么办呢?12cat /etc/yum.repos.d/CentOS.Base.repobaseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/ 其中$releasever代表的是系统版本 12[root@localhost ~]# cat /etc/centos-releaseCentOS Linux release 7.6.1810 (Core) 自动识别本地系统版本,和网站中的最新的版本对应.所以应该更改配置文件中的版本信息 1234561 查看 发现网站中http://mirrors.aliyun.com/centos/ centos版本最新的是7.6.18102 替换[root@localhost ~]# sed -i &apos;s/$releasever/7.6.1810/g&apos; /etc/yum.repos.d/CentOS.Base.repo 3更新[root@localhost ~]# yum clean all yum常用操作安装和升级 1234yum install -y httpd #安装软件包yum update httpd #升级软件包,改变软件设置和系统设置,系统版本内核都升级yum upgrade httpd #升级软件包,不改变软件设置和系统设置,系统版本升级,内核不改变yum -y update #系统内能升级的软件都会升级 检索 123yum info net-tools #查询rpm包的作用yum provides /usr/sbin/ifconfig #查询文件是哪一个软件安装的,同rpm -qfyum search vim #按照关键字搜索软件包 卸载 1yum remove zsh #卸载包 yum安装开发工具软件包组 12345查看有哪些软件包组[root@localhost ~]# yum grouplist安装开发工具组[root@localhost ~]# yum groupinstall &quot;Development Tools&quot; 源码包源码安装Nginx安装1安装依赖 1[root@localhost ~]# yum -y install gcc gcc-c++ make zlib-devel pcre pcre-devel openssl-devel 2解压 1[root@localhost ~]# tar zxvf nginx-1.16.0.tar.gz 3安装软件 1234[root@localhost ~]# cd nginx-1.16.0[root@localhost nginx-1.16.0]# ./configure --prefix=/usr/local/nginx[root@localhost nginx-1.16.0]# make -j 4 [root@localhost nginx-1.16.0]# make install 详解./configure 可以指定安装路径,例如 –prefix=/usr/local/nginx 启用或者禁用某项功能 检查安装环境 最终生成:Makefile make -j 4 按Makefile文件编译 通过4核心CPU来完成 make install 按Makefile定义的文件路径安装 make clean 当我们想指定安装路径,这时就需要删除上次生成的Makefile. 或者可以删除源码包,重新解压. 删除源码包1make uninstall 但是很多时候删除不干净所以一般安装时指定路径–prefix=/usr/local/nginx这样进行操作时,可以直接对这个路径进行操作 错误解决方法1can&apos;t find ext2fs library 根据提示,安装ext2fs库 一般我们可以RPM安装,通过按tab键补齐.不行的话可以查找关键字 12345[root@localhost ~]# rpm -ivh /mnt/Packages/ext2fs[root@localhost ~]# ls /mnt/Packages/*ext2fs*[root@localhost ~]# ls /mnt/Packages/*2fs*/mnt/Packages/e2fsprogs-libs-1.42.9-13.el7.i686.rpm/mnt/Packages/e2fsprogs-libs-1.42.9-13.el7.x86_64.rpm 还可以通过yum search ext2fs来检索 1[root@localhost ~]# yum search ext2fs 当我们把库已经安装,但是configure时又说找不到,怎么办 我们还需要安装该库的头文件 1/mnt/Packages/e2fsprogs-devel-1.42.9-13.el7.x86_64.rpm 总结 rpm+yum:方便,软件版本低,稳定性好,管理方便 源码编译:麻烦,软件版本新,可以定制,稳定性和管理稍差,但是性能好 一般LAMP或LNMP架构时,我们会用源码 文件的归档和压缩 好处:节约硬盘的资源,加快文件传输速率 tar命令:打包文件选项 -c 创建压缩包 -x 解压还原文件 -v 显示执行详细过程 -f 指定文件 -t 不解包,查看包中的内容 -C 指定解压位置 把/boot/grub/打包到指定路径 123[root@localhost ~]# tar -cvf /home/harry1/grub.tar /boot/grub//boot/grub//boot/grub/splash.xpm.gz 解包grub.tar到指定路径 123[root@localhost ~]# tar xvf grub.tar boot/grub/boot/grub/splash.xpm.gz 将多个目录和文件打包成一个软件包 1234[root@localhost ~]# tar -cvf /home/harry1/back.tar /etc/passwd /etc/group /home/harry1//etc/passwd/etc/group/home/harry1/ 不解包,只查看包中的内容 1234[root@localhost ~]# tar -tvf /home/harry1/back.tar -rw-r--r-- root/root 941 2019-06-05 05:17 etc/passwd-rw-r--r-- root/root 519 2019-06-05 05:17 etc/group... 在使用绝对路径名归档文件时,默认从文件名中删除该路径前面的/符号,这样解压时,会直接解压到当前目录.不然会覆盖原路径中的文件 归档+压缩参数 -z 以gzip方式压缩 扩展名tar.gz -j 以bz2方式压缩 扩展名tar.bz2 -J 以xzx方式压缩 扩展名tar.xz tar.gzip 1234压缩[root@localhost ~]# tar zcvf /home/harry1/etc.tar.gz /etc解压缩[root@localhost ~]# tar zxvf /home/harry1/etc.tar.gz -C /opt/ tar.bz2 1234压缩[root@localhost ~]# tar jcvf /home/harry1/etc.tar.bz2 /etc解压缩[root@localhost ~]# tar jxvf /home/harry1/etc.tar.bz2 -C /opt/ tar.xz 1234压缩[root@localhost ~]# tar Jcvf /home/harry1/etc.tar.xz /etc解压缩[root@localhost ~]# tar Jxvf /home/harry1/etc.tar.xz -C /opt/ 经过测试,解压缩时如果存在相同文件,会直接覆盖,不会询问 效果 r &lt; tar.gzip &lt; tar.bz2 &lt; tar.xz ,所用的时间越长]]></content>
      <categories>
        <category>linux基础</category>
      </categories>
      <tags>
        <tag>yum本地源</tag>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过git+hexo+github搭建个人站点]]></title>
    <url>%2F2019%2F06%2F16%2F%E9%80%9A%E8%BF%87git%2Bhexo%2Bgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%AB%99%E7%82%B9%2F</url>
    <content type="text"><![CDATA[通过git+hexo+github搭建个人站点 git：分布式版本控制系统，在这里的作用是，通过git工具将hexo生成的页面部署到gitee上的个人站点 hexo：Hexo 是一个快速、简洁且高效的博客框架。 github：GitHub是最大的开源代码托管平台,旨在促进在一个共同项目上工作的个人之间的代码托管、版本控制和协作。 1安装git相关工具 需要安装git和node.js工具 安装git https://git-scm.com 1开始安装 2选择安装路径 3选择安装组件 4菜单文件夹 5git使用的默认编辑器 6调整环境变量 7选择http传输 8配置行尾结束符号 9配置终端仿真 10其他配置，默认就好 测试是否安装完成（cmd命令行） 安装node.js https://nodejs.org1开始安装 2协议 3安装路径 4默认安装4项 5安装 6安装完成 7测试是否安装成功 2安装hexo，并生成本地站点1右击打开Git Bash Here 12inmeditation@DESKTOP-029SIEV MINGW64 ~/Desktop$ 2安装hexo 1$ npm install -g hexo-cli 3指定文件夹并安装所需要的文件 123$ hexo init hexob$ hexo cd hexob$ npm install 4启动本地网站 12$ hexo g$ hexo s 5浏览器预览网站 1 http://localhost:4000 3配置next主题 命令都是在hexod目录下执行 1下载next主题 在hexo官方网站点击主题名称,跳转到github下载页面,复制页面提供的下载链接将该主题下载至themes目录下 1$ git clone https://github.com/theme-next/hexo-theme-next.git ./themes/next 2启用next 修改/Desktop/hexob/_config.yml 1theme: next 3更改主题为中文 修改/Desktop/hexob/_config.yml 1language: zh-CN 4标签页和分类页 Desktop\hexob\themes\next_config.yml在首页添加 12345menu: home: / || home tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive 5使标签和分类生效 5.1标签页生效 会在\hexob\source下创建\tags\index.md 1$ hexo n page tags 编辑该文件\tags\index.md 12345---title: 标题date: 2019-06-15 23:29:21type: &quot;tags&quot;--- 5.2分类页生效 会在\hexob\source下创建\categories\index.md 1$ hexo n page categories 编辑categories\index.md 123456---title: 分类date: 2019-06-15 23:37:11type: categories--- 6更改主题样式 Desktop\hexob\themes\next\ _config.yml 12345# Schemes#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini 7设置头像 200* 200照片存放位置:\Desktop\hexob\themes\next\source\images配置文件:Desktop\hexob\themes\next\ _config.yml 12avatar: url: /images/avatar.gif 8更改标题作者及链接 修改/Desktop/hexob/_config.yml 123title: INMEDITATIONauthor: sunlizhaourl: https://www.cnblogs.com/inmeditation 9启用侧边栏的社交链接 Desktop\hexob\themes\next\ _config.yml 12345social: 百度: https://www.baidu.com/ 博客园: https://www.cnblogs.com/ CSDN: https://www.csdn.net/ 李鑫snake: minisnake.cn/ 10启用友情链接 Desktop\hexob\themes\next\ _config.yml 12links: 自用: https://www.cnblogs.com/inmeditation 11新建一篇文章 文章存放目录Desktop\hexob\source_posts 1$ hexo n 测试文章 测试文章.md 中内容 12345678910111213---title: 测试文章date: 2019-06-16 00:13:29tags: - 导航 - 测试 - 分享categories: - 测试 ---### 文章内容 12开启文章的打赏功能 图片存放路径Desktop\hexob\themes\next\source\images配置文件Desktop\hexob\themes\next\ _config.yml 1234567reward_settings: enable: true animation: truereward: 微信: /images/wechatpay.png 支付宝: /images/alipay.png 13设置头像为圆形,可旋转\Desktop\hexob\themes\next\source\css_common\components\sidebar\sidebar-author.styl 1234567891011121314.site-author-image &#123; show(); margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; opacity: hexo-config(&apos;avatar.opacity&apos;) is a &apos;unit&apos; ? hexo-config(&apos;avatar.opacity&apos;) : 1; border-radius: 50%; #头像圆形 transition: 2s all; #旋转动画时间&#125;.site-author-image:hover&#123; transform: rotate(360deg); #旋转角度&#125; 14首页文章设置阅读全文 Desktop\hexob\themes\next\ _config.yml 123auto_excerpt: enable: true length: 80 15搜索功能Local Search 安装 1$ npm install hexo-generator-searchdb --save 站点配置文件中新加 12345search: path: search.xml field: post format: html limit: 10000 主题配置文件中启用 12local_search: enable: true 16不蒜子统计 主题配置文件 12345678busuanzi_count: enable: true site_uv: true site_uv_header: 本站访客数 site_uv_footer: 人次 site_pv: true site_pv_header: 本站总访问量 site_pv_footer: 次 17隐藏底部驱动 将改文件内,信息注释掉\Desktop\hexob\themes\next\layout_partials\footer.swig 123456789101112131415161718&lt;!--&#123;% if theme.footer.powered.enable %&#125; &lt;div class=&quot;powered-by&quot;&gt;&#123;# #&#125;&#123;&#123; __(&apos;footer.powered&apos;, next_url(&apos;https://hexo.io&apos;, &apos;Hexo&apos;, &#123;class: &apos;theme-link&apos;&#125;)) &#125;&#125;&#123;# #&#125;&#123;% if theme.footer.powered.version %&#125; v&#123;&#123; hexo_env(&apos;version&apos;) &#125;&#125;&#123;% endif %&#125;&#123;# #&#125;&lt;/div&gt;&#123;% endif %&#125;&#123;% if theme.footer.powered.enable and theme.footer.theme.enable %&#125; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&#123;% endif %&#125; &#123;% if theme.footer.theme.enable %&#125; &lt;div class=&quot;theme-info&quot;&gt;&#123;# #&#125;&#123;&#123; __(&apos;footer.theme&apos;) &#125;&#125; – &#123;&#123; next_url(&apos;https://theme-next.org&apos;, &apos;NexT.&apos; + theme.scheme, &#123;class: &apos;theme-link&apos;&#125;) &#125;&#125;&#123;# #&#125;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; version &#125;&#125;&#123;% endif %&#125;&#123;##&#125;&lt;/div&gt;&#123;% endif %&#125; --&gt; 4部署1配置git 12$ git config --global user.name &quot;inmeditation&quot;$ git config --global user.email &quot;15053638991@163.com&quot; 2配置ssh公钥 2.1本地生成秘钥 1$ ssh-keygen -t rsa -C &quot;15053638991@163.com&quot; 2.2复制 1$ cat ~/.ssh/id_rsa.pub 2.3粘贴到站点 1https://gitee.com/profile/sshkeys 3测试公钥链接 1234$ ssh -T git@github.comHi sunlizhao31! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 4安装hexo-deployer-git 1$ npm install hexo-deployer-git --save 5复制gitee仓库ssh地址到站点配置文件 1234deploy: type: git repo: git@gitee.com:inmeditation/inmeditation.git branch: master 6生成&amp;部署 1$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 7启动Gitee Pages 服务,即可访问 https://gitee.com/inmeditation/inmeditation/pages 1http://inmeditation.gitee.io/ 5绑定域名1,CNAME 文件配置 在hexob\source\下创建CNAME文件,存放自定义域名 1www.sunlizhao.cn 2,在域名购买处,设置解析 主机记录 记录类型 线路类型 记录值 MX优先级 TTL（秒） 最后操作时间 操作 www CNAME 境内 sunlizhao31.github.io. - 600 2019-06-27 19:53:32 修改暂停删除 @ A 境内 185.199.108.153 - 600 2019-06-27 20:12:26 修改暂停删除 3,GitHub Pages 在此处添加自定义域名]]></content>
      <categories>
        <category>lamp</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>个人站点</tag>
        <tag>绑定域名</tag>
      </tags>
  </entry>
</search>
